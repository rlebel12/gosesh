// Code generated by mockery v2.42.0. DO NOT EDIT.

package gosesh

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockUserDataRequester is an autogenerated mock type for the UserDataRequester type
type MockUserDataRequester struct {
	mock.Mock
}

type MockUserDataRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserDataRequester) EXPECT() *MockUserDataRequester_Expecter {
	return &MockUserDataRequester_Expecter{mock: &_m.Mock}
}

// GetEmail provides a mock function with given fields:
func (_m *MockUserDataRequester) GetEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserDataRequester_GetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmail'
type MockUserDataRequester_GetEmail_Call struct {
	*mock.Call
}

// GetEmail is a helper method to define mock.On call
func (_e *MockUserDataRequester_Expecter) GetEmail() *MockUserDataRequester_GetEmail_Call {
	return &MockUserDataRequester_GetEmail_Call{Call: _e.mock.On("GetEmail")}
}

func (_c *MockUserDataRequester_GetEmail_Call) Run(run func()) *MockUserDataRequester_GetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserDataRequester_GetEmail_Call) Return(_a0 string) *MockUserDataRequester_GetEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserDataRequester_GetEmail_Call) RunAndReturn(run func() string) *MockUserDataRequester_GetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, gs, accessToken
func (_m *MockUserDataRequester) Request(ctx context.Context, gs *Gosesh, accessToken string) (*http.Response, error) {
	ret := _m.Called(ctx, gs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Gosesh, string) (*http.Response, error)); ok {
		return rf(ctx, gs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Gosesh, string) *http.Response); ok {
		r0 = rf(ctx, gs, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Gosesh, string) error); ok {
		r1 = rf(ctx, gs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDataRequester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockUserDataRequester_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - gs *Gosesh
//   - accessToken string
func (_e *MockUserDataRequester_Expecter) Request(ctx interface{}, gs interface{}, accessToken interface{}) *MockUserDataRequester_Request_Call {
	return &MockUserDataRequester_Request_Call{Call: _e.mock.On("Request", ctx, gs, accessToken)}
}

func (_c *MockUserDataRequester_Request_Call) Run(run func(ctx context.Context, gs *Gosesh, accessToken string)) *MockUserDataRequester_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Gosesh), args[2].(string))
	})
	return _c
}

func (_c *MockUserDataRequester_Request_Call) Return(_a0 *http.Response, _a1 error) *MockUserDataRequester_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDataRequester_Request_Call) RunAndReturn(run func(context.Context, *Gosesh, string) (*http.Response, error)) *MockUserDataRequester_Request_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserDataRequester creates a new instance of MockUserDataRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserDataRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserDataRequester {
	mock := &MockUserDataRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
