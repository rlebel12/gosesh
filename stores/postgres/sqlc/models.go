// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type StockRangeType string

const (
	StockRangeTypeRISING          StockRangeType = "RISING"
	StockRangeTypeCRASHING        StockRangeType = "CRASHING"
	StockRangeTypeVARYING         StockRangeType = "VARYING"
	StockRangeTypeMINRECOVERY     StockRangeType = "MIN_RECOVERY"
	StockRangeTypeMINIMUMRECOVERY StockRangeType = "MINIMUM_RECOVERY"
)

func (e *StockRangeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StockRangeType(s)
	case string:
		*e = StockRangeType(s)
	default:
		return fmt.Errorf("unsupported scan type for StockRangeType: %T", src)
	}
	return nil
}

type NullStockRangeType struct {
	StockRangeType StockRangeType
	Valid          bool // Valid is true if StockRangeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStockRangeType) Scan(value interface{}) error {
	if value == nil {
		ns.StockRangeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StockRangeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStockRangeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StockRangeType), nil
}

type StockTrend string

const (
	StockTrendNONE      StockTrend = "NONE"
	StockTrendRISING    StockTrend = "RISING"
	StockTrendCRASHING  StockTrend = "CRASHING"
	StockTrendVARYING   StockTrend = "VARYING"
	StockTrendSLIDING   StockTrend = "SLIDING"
	StockTrendSNEEZING  StockTrend = "SNEEZING"
	StockTrendSQUEEZING StockTrend = "SQUEEZING"
)

func (e *StockTrend) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StockTrend(s)
	case string:
		*e = StockTrend(s)
	default:
		return fmt.Errorf("unsupported scan type for StockTrend: %T", src)
	}
	return nil
}

type NullStockTrend struct {
	StockTrend StockTrend
	Valid      bool // Valid is true if StockTrend is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStockTrend) Scan(value interface{}) error {
	if value == nil {
		ns.StockTrend, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StockTrend.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStockTrend) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StockTrend), nil
}

type BoneCrush struct {
	ID          pgtype.UUID
	UserID      int64
	Total       int32
	LastCrushAt pgtype.Timestamptz
}

type Currency struct {
	ID         pgtype.UUID
	Name       string
	GuildID    int64
	ValueScale float32
	CreatedAt  pgtype.Timestamptz
}

type GuildConfiguration struct {
	ID                pgtype.UUID
	GuildID           int64
	Timezone          string
	BotManagerRoleID  int64
	CreatedAt         pgtype.Timestamptz
	DefaultCurrencyID pgtype.UUID
}

type LoreFact struct {
	ID        pgtype.UUID
	UserID    int64
	Fact      string
	GuildID   int64
	CreatedAt pgtype.Timestamptz
	Enabled   bool
	Generated bool
}

type LoreFactPromptModifier struct {
	ID              pgtype.UUID
	CreatedByUserID int64
	GuildID         int64
	Modifier        string
	Chance          float32
	Enabled         bool
	CreatedAt       pgtype.Timestamptz
}

type LoreResponse struct {
	ID                     pgtype.UUID
	MessageReferenceID     pgtype.UUID
	Prompt                 string
	Response               string
	PreviousLoreResponseID pgtype.UUID
	CreatedAt              pgtype.Timestamptz
	UserID                 int64
}

type LoreResponseLoreFactJunction struct {
	LoreResponseID pgtype.UUID
	LoreFactID     pgtype.UUID
}

type LoreResponseLoreFactPromptModifierJunction struct {
	LoreResponseID           pgtype.UUID
	LoreFactPromptModifierID pgtype.UUID
}

type MessageReference struct {
	ID        pgtype.UUID
	GuildID   int64
	MessageID int64
	ChannelID int64
	CreatedAt pgtype.Timestamptz
}

type MostRecentStockPrice struct {
	ID           pgtype.UUID
	StockID      pgtype.UUID
	StockPriceID pgtype.UUID
}

type SelectableRole struct {
	ID        pgtype.UUID
	GuildID   int64
	RoleID    int64
	Category  string
	Name      string
	CreatedAt pgtype.Timestamptz
}

type SelectableRoleMessage struct {
	ID        pgtype.UUID
	GuildID   int64
	Category  string
	ChannelID int64
	MessageID int64
	CreatedAt pgtype.Timestamptz
}

type Session struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	IdleAt   pgtype.Timestamptz
	ExpireAt pgtype.Timestamptz
}

type Stock struct {
	ID                   pgtype.UUID
	GuildID              int64
	Symbol               string
	Name                 string
	CreatedAt            pgtype.Timestamptz
	CrashLikelihood      float32
	RiseLikelihood       float32
	VaryLikelihood       float32
	PriceMinimum         int32
	AnchorIncreaseChance float32
}

type StockHolding struct {
	ID           pgtype.UUID
	UserID       int64
	StockID      pgtype.UUID
	Quantity     int64
	CreatedAt    pgtype.Timestamptz
	StockPriceID pgtype.UUID
}

type StockPrice struct {
	ID                   pgtype.UUID
	StockID              pgtype.UUID
	Price                int32
	Timestamp            pgtype.Timestamptz
	Trend                StockTrend
	AnchorPrice          int32
	PreviousStockPriceID pgtype.UUID
}

type StockRange struct {
	ID        pgtype.UUID
	StockID   pgtype.UUID
	Type      StockRangeType
	CreatedAt pgtype.Timestamptz
	Min       int32
	Max       int32
}

type StockTransaction struct {
	ID           pgtype.UUID
	UserID       int64
	StockPriceID pgtype.UUID
	Quantity     int64
	CreatedAt    pgtype.Timestamptz
}

type User struct {
	ID        pgtype.UUID
	DiscordID string
	Name      string
}

type UserPermission struct {
	ID                 pgtype.UUID
	UserID             pgtype.UUID
	Administrator      bool
	StockAdministrator bool
}

type UserPreference struct {
	UserID         pgtype.UUID
	DefaultGuildID int64
}

type Wallet struct {
	ID         pgtype.UUID
	UserID     int64
	CurrencyID pgtype.UUID
	Balance    int64
	CreatedAt  pgtype.Timestamptz
	ReloadedAt pgtype.Timestamptz
}
