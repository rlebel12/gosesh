// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, idle_at, expire_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, idle_at, expire_at
`

type CreateSessionParams struct {
	UserID   pgtype.UUID
	IdleAt   pgtype.Timestamptz
	ExpireAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.IdleAt, arg.ExpireAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdleAt,
		&i.ExpireAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :execrows
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSession, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteUserSessions = `-- name: DeleteUserSessions :execrows
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUserSessions, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSession = `-- name: GetSession :one
SELECT id,
    user_id,
    idle_at,
    expire_at
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdleAt,
		&i.ExpireAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET idle_at = $1,
    expire_at = $2
WHERE id = $3
RETURNING id, user_id, idle_at, expire_at
`

type UpdateSessionParams struct {
	IdleAt   pgtype.Timestamptz
	ExpireAt pgtype.Timestamptz
	ID       pgtype.UUID
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession, arg.IdleAt, arg.ExpireAt, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdleAt,
		&i.ExpireAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (key)
VALUES ($1) ON CONFLICT (key) DO
UPDATE
SET key = EXCLUDED.key
RETURNING id
`

func (q *Queries) UpsertUser(ctx context.Context, key string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, upsertUser, key)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
