// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: gosesh.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoseshClient is the client API for Gosesh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoseshClient interface {
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	DeleteSessionsForUser(ctx context.Context, in *DeleteSessionsForUserRequest, opts ...grpc.CallOption) (*DeleteSessionsForUserResponse, error)
}

type goseshClient struct {
	cc grpc.ClientConnInterface
}

func NewGoseshClient(cc grpc.ClientConnInterface) GoseshClient {
	return &goseshClient{cc}
}

func (c *goseshClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.Gosesh/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goseshClient) DeleteSessionsForUser(ctx context.Context, in *DeleteSessionsForUserRequest, opts ...grpc.CallOption) (*DeleteSessionsForUserResponse, error) {
	out := new(DeleteSessionsForUserResponse)
	err := c.cc.Invoke(ctx, "/proto.Gosesh/DeleteSessionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoseshServer is the server API for Gosesh service.
// All implementations must embed UnimplementedGoseshServer
// for forward compatibility
type GoseshServer interface {
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	DeleteSessionsForUser(context.Context, *DeleteSessionsForUserRequest) (*DeleteSessionsForUserResponse, error)
	mustEmbedUnimplementedGoseshServer()
}

// UnimplementedGoseshServer must be embedded to have forward compatible implementations.
type UnimplementedGoseshServer struct {
}

func (UnimplementedGoseshServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedGoseshServer) DeleteSessionsForUser(context.Context, *DeleteSessionsForUserRequest) (*DeleteSessionsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionsForUser not implemented")
}
func (UnimplementedGoseshServer) mustEmbedUnimplementedGoseshServer() {}

// UnsafeGoseshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoseshServer will
// result in compilation errors.
type UnsafeGoseshServer interface {
	mustEmbedUnimplementedGoseshServer()
}

func RegisterGoseshServer(s grpc.ServiceRegistrar, srv GoseshServer) {
	s.RegisterService(&Gosesh_ServiceDesc, srv)
}

func _Gosesh_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoseshServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gosesh/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoseshServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gosesh_DeleteSessionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoseshServer).DeleteSessionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gosesh/DeleteSessionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoseshServer).DeleteSessionsForUser(ctx, req.(*DeleteSessionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gosesh_ServiceDesc is the grpc.ServiceDesc for Gosesh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gosesh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gosesh",
	HandlerType: (*GoseshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Gosesh_GetSession_Handler,
		},
		{
			MethodName: "DeleteSessionsForUser",
			Handler:    _Gosesh_DeleteSessionsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gosesh.proto",
}
