// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock_providers

import (
	http "net/http"

	gosesh "github.com/rlebel12/gosesh"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// OAuth2Begin provides a mock function with given fields:
func (_m *Provider) OAuth2Begin() http.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OAuth2Begin")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func() http.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Provider_OAuth2Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2Begin'
type Provider_OAuth2Begin_Call struct {
	*mock.Call
}

// OAuth2Begin is a helper method to define mock.On call
func (_e *Provider_Expecter) OAuth2Begin() *Provider_OAuth2Begin_Call {
	return &Provider_OAuth2Begin_Call{Call: _e.mock.On("OAuth2Begin")}
}

func (_c *Provider_OAuth2Begin_Call) Run(run func()) *Provider_OAuth2Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_OAuth2Begin_Call) Return(_a0 http.HandlerFunc) *Provider_OAuth2Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_OAuth2Begin_Call) RunAndReturn(run func() http.HandlerFunc) *Provider_OAuth2Begin_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2Callback provides a mock function with given fields: handler
func (_m *Provider) OAuth2Callback(handler gosesh.HandlerDone) http.HandlerFunc {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OAuth2Callback")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(gosesh.HandlerDone) http.HandlerFunc); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Provider_OAuth2Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2Callback'
type Provider_OAuth2Callback_Call struct {
	*mock.Call
}

// OAuth2Callback is a helper method to define mock.On call
//   - handler gosesh.HandlerDone
func (_e *Provider_Expecter) OAuth2Callback(handler interface{}) *Provider_OAuth2Callback_Call {
	return &Provider_OAuth2Callback_Call{Call: _e.mock.On("OAuth2Callback", handler)}
}

func (_c *Provider_OAuth2Callback_Call) Run(run func(handler gosesh.HandlerDone)) *Provider_OAuth2Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gosesh.HandlerDone))
	})
	return _c
}

func (_c *Provider_OAuth2Callback_Call) Return(_a0 http.HandlerFunc) *Provider_OAuth2Callback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_OAuth2Callback_Call) RunAndReturn(run func(gosesh.HandlerDone) http.HandlerFunc) *Provider_OAuth2Callback_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
