// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock_providers

import (
	http "net/http"

	gosesh "github.com/rlebel12/gosesh"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// Gosesher is an autogenerated mock type for the Gosesher type
type Gosesher struct {
	mock.Mock
}

type Gosesher_Expecter struct {
	mock *mock.Mock
}

func (_m *Gosesher) EXPECT() *Gosesher_Expecter {
	return &Gosesher_Expecter{mock: &_m.Mock}
}

// Host provides a mock function with given fields:
func (_m *Gosesher) Host() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Gosesher_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type Gosesher_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *Gosesher_Expecter) Host() *Gosesher_Host_Call {
	return &Gosesher_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *Gosesher_Host_Call) Run(run func()) *Gosesher_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gosesher_Host_Call) Return(_a0 string) *Gosesher_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gosesher_Host_Call) RunAndReturn(run func() string) *Gosesher_Host_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2Begin provides a mock function with given fields: cfg
func (_m *Gosesher) OAuth2Begin(cfg *oauth2.Config) http.HandlerFunc {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for OAuth2Begin")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(*oauth2.Config) http.HandlerFunc); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Gosesher_OAuth2Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2Begin'
type Gosesher_OAuth2Begin_Call struct {
	*mock.Call
}

// OAuth2Begin is a helper method to define mock.On call
//   - cfg *oauth2.Config
func (_e *Gosesher_Expecter) OAuth2Begin(cfg interface{}) *Gosesher_OAuth2Begin_Call {
	return &Gosesher_OAuth2Begin_Call{Call: _e.mock.On("OAuth2Begin", cfg)}
}

func (_c *Gosesher_OAuth2Begin_Call) Run(run func(cfg *oauth2.Config)) *Gosesher_OAuth2Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Config))
	})
	return _c
}

func (_c *Gosesher_OAuth2Begin_Call) Return(_a0 http.HandlerFunc) *Gosesher_OAuth2Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gosesher_OAuth2Begin_Call) RunAndReturn(run func(*oauth2.Config) http.HandlerFunc) *Gosesher_OAuth2Begin_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2Callback provides a mock function with given fields: w, r, user, cfg
func (_m *Gosesher) OAuth2Callback(w http.ResponseWriter, r *http.Request, user gosesh.OAuth2User, cfg *oauth2.Config) error {
	ret := _m.Called(w, r, user, cfg)

	if len(ret) == 0 {
		panic("no return value specified for OAuth2Callback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, gosesh.OAuth2User, *oauth2.Config) error); ok {
		r0 = rf(w, r, user, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gosesher_OAuth2Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2Callback'
type Gosesher_OAuth2Callback_Call struct {
	*mock.Call
}

// OAuth2Callback is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - user gosesh.OAuth2User
//   - cfg *oauth2.Config
func (_e *Gosesher_Expecter) OAuth2Callback(w interface{}, r interface{}, user interface{}, cfg interface{}) *Gosesher_OAuth2Callback_Call {
	return &Gosesher_OAuth2Callback_Call{Call: _e.mock.On("OAuth2Callback", w, r, user, cfg)}
}

func (_c *Gosesher_OAuth2Callback_Call) Run(run func(w http.ResponseWriter, r *http.Request, user gosesh.OAuth2User, cfg *oauth2.Config)) *Gosesher_OAuth2Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(gosesh.OAuth2User), args[3].(*oauth2.Config))
	})
	return _c
}

func (_c *Gosesher_OAuth2Callback_Call) Return(_a0 error) *Gosesher_OAuth2Callback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gosesher_OAuth2Callback_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, gosesh.OAuth2User, *oauth2.Config) error) *Gosesher_OAuth2Callback_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with given fields:
func (_m *Gosesher) Scheme() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Gosesher_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type Gosesher_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *Gosesher_Expecter) Scheme() *Gosesher_Scheme_Call {
	return &Gosesher_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *Gosesher_Scheme_Call) Run(run func()) *Gosesher_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gosesher_Scheme_Call) Return(_a0 string) *Gosesher_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gosesher_Scheme_Call) RunAndReturn(run func() string) *Gosesher_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// NewGosesher creates a new instance of Gosesher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGosesher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Gosesher {
	mock := &Gosesher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
