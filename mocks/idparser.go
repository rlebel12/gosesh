// Code generated by mockery v2.42.0. DO NOT EDIT.

package gosesh

import (
	gosesh "github.com/rlebel12/gosesh"
	mock "github.com/stretchr/testify/mock"
)

// IDParser is an autogenerated mock type for the IDParser type
type IDParser struct {
	mock.Mock
}

type IDParser_Expecter struct {
	mock *mock.Mock
}

func (_m *IDParser) EXPECT() *IDParser_Expecter {
	return &IDParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: _a0
func (_m *IDParser) Parse(_a0 []byte) (gosesh.Identifier, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 gosesh.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (gosesh.Identifier, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) gosesh.Identifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gosesh.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IDParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type IDParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - _a0 []byte
func (_e *IDParser_Expecter) Parse(_a0 interface{}) *IDParser_Parse_Call {
	return &IDParser_Parse_Call{Call: _e.mock.On("Parse", _a0)}
}

func (_c *IDParser_Parse_Call) Run(run func(_a0 []byte)) *IDParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *IDParser_Parse_Call) Return(_a0 gosesh.Identifier, _a1 error) *IDParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IDParser_Parse_Call) RunAndReturn(run func([]byte) (gosesh.Identifier, error)) *IDParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewIDParser creates a new instance of IDParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDParser {
	mock := &IDParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
