// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gosesh "github.com/rlebel12/gosesh"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, req
func (_m *Storer) CreateSession(ctx context.Context, req gosesh.CreateSessionRequest) (*gosesh.Session, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *gosesh.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.CreateSessionRequest) (*gosesh.Session, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.CreateSessionRequest) *gosesh.Session); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosesh.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosesh.CreateSessionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type Storer_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - req gosesh.CreateSessionRequest
func (_e *Storer_Expecter) CreateSession(ctx interface{}, req interface{}) *Storer_CreateSession_Call {
	return &Storer_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, req)}
}

func (_c *Storer_CreateSession_Call) Run(run func(ctx context.Context, req gosesh.CreateSessionRequest)) *Storer_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.CreateSessionRequest))
	})
	return _c
}

func (_c *Storer_CreateSession_Call) Return(_a0 *gosesh.Session, _a1 error) *Storer_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_CreateSession_Call) RunAndReturn(run func(context.Context, gosesh.CreateSessionRequest) (*gosesh.Session, error)) *Storer_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *Storer) DeleteSession(ctx context.Context, sessionID gosesh.Identifier) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type Storer_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID gosesh.Identifier
func (_e *Storer_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *Storer_DeleteSession_Call {
	return &Storer_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *Storer_DeleteSession_Call) Run(run func(ctx context.Context, sessionID gosesh.Identifier)) *Storer_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.Identifier))
	})
	return _c
}

func (_c *Storer_DeleteSession_Call) Return(_a0 error) *Storer_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_DeleteSession_Call) RunAndReturn(run func(context.Context, gosesh.Identifier) error) *Storer_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserSessions provides a mock function with given fields: ctx, userID
func (_m *Storer) DeleteUserSessions(ctx context.Context, userID gosesh.Identifier) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSessions")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosesh.Identifier) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_DeleteUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserSessions'
type Storer_DeleteUserSessions_Call struct {
	*mock.Call
}

// DeleteUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID gosesh.Identifier
func (_e *Storer_Expecter) DeleteUserSessions(ctx interface{}, userID interface{}) *Storer_DeleteUserSessions_Call {
	return &Storer_DeleteUserSessions_Call{Call: _e.mock.On("DeleteUserSessions", ctx, userID)}
}

func (_c *Storer_DeleteUserSessions_Call) Run(run func(ctx context.Context, userID gosesh.Identifier)) *Storer_DeleteUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.Identifier))
	})
	return _c
}

func (_c *Storer_DeleteUserSessions_Call) Return(_a0 int, _a1 error) *Storer_DeleteUserSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_DeleteUserSessions_Call) RunAndReturn(run func(context.Context, gosesh.Identifier) (int, error)) *Storer_DeleteUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: ctx, sessionID
func (_m *Storer) GetSession(ctx context.Context, sessionID gosesh.Identifier) (*gosesh.Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *gosesh.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier) (*gosesh.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier) *gosesh.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosesh.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosesh.Identifier) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type Storer_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID gosesh.Identifier
func (_e *Storer_Expecter) GetSession(ctx interface{}, sessionID interface{}) *Storer_GetSession_Call {
	return &Storer_GetSession_Call{Call: _e.mock.On("GetSession", ctx, sessionID)}
}

func (_c *Storer_GetSession_Call) Run(run func(ctx context.Context, sessionID gosesh.Identifier)) *Storer_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.Identifier))
	})
	return _c
}

func (_c *Storer_GetSession_Call) Return(_a0 *gosesh.Session, _a1 error) *Storer_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_GetSession_Call) RunAndReturn(run func(context.Context, gosesh.Identifier) (*gosesh.Session, error)) *Storer_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function with given fields: ctx, sessionID, req
func (_m *Storer) UpdateSession(ctx context.Context, sessionID gosesh.Identifier, req gosesh.UpdateSessionValues) (*gosesh.Session, error) {
	ret := _m.Called(ctx, sessionID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 *gosesh.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier, gosesh.UpdateSessionValues) (*gosesh.Session, error)); ok {
		return rf(ctx, sessionID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.Identifier, gosesh.UpdateSessionValues) *gosesh.Session); ok {
		r0 = rf(ctx, sessionID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosesh.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosesh.Identifier, gosesh.UpdateSessionValues) error); ok {
		r1 = rf(ctx, sessionID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type Storer_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID gosesh.Identifier
//   - req gosesh.UpdateSessionValues
func (_e *Storer_Expecter) UpdateSession(ctx interface{}, sessionID interface{}, req interface{}) *Storer_UpdateSession_Call {
	return &Storer_UpdateSession_Call{Call: _e.mock.On("UpdateSession", ctx, sessionID, req)}
}

func (_c *Storer_UpdateSession_Call) Run(run func(ctx context.Context, sessionID gosesh.Identifier, req gosesh.UpdateSessionValues)) *Storer_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.Identifier), args[2].(gosesh.UpdateSessionValues))
	})
	return _c
}

func (_c *Storer_UpdateSession_Call) Return(_a0 *gosesh.Session, _a1 error) *Storer_UpdateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_UpdateSession_Call) RunAndReturn(run func(context.Context, gosesh.Identifier, gosesh.UpdateSessionValues) (*gosesh.Session, error)) *Storer_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUser provides a mock function with given fields: ctx, udr
func (_m *Storer) UpsertUser(ctx context.Context, udr gosesh.OAuth2User) (gosesh.Identifier, error) {
	ret := _m.Called(ctx, udr)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 gosesh.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.OAuth2User) (gosesh.Identifier, error)); ok {
		return rf(ctx, udr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosesh.OAuth2User) gosesh.Identifier); ok {
		r0 = rf(ctx, udr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gosesh.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosesh.OAuth2User) error); ok {
		r1 = rf(ctx, udr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_UpsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUser'
type Storer_UpsertUser_Call struct {
	*mock.Call
}

// UpsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - udr gosesh.OAuth2User
func (_e *Storer_Expecter) UpsertUser(ctx interface{}, udr interface{}) *Storer_UpsertUser_Call {
	return &Storer_UpsertUser_Call{Call: _e.mock.On("UpsertUser", ctx, udr)}
}

func (_c *Storer_UpsertUser_Call) Run(run func(ctx context.Context, udr gosesh.OAuth2User)) *Storer_UpsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gosesh.OAuth2User))
	})
	return _c
}

func (_c *Storer_UpsertUser_Call) Return(_a0 gosesh.Identifier, _a1 error) *Storer_UpsertUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_UpsertUser_Call) RunAndReturn(run func(context.Context, gosesh.OAuth2User) (gosesh.Identifier, error)) *Storer_UpsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
