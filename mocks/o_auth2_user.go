// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock_gosesh

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OAuth2User is an autogenerated mock type for the OAuth2User type
type OAuth2User struct {
	mock.Mock
}

type OAuth2User_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuth2User) EXPECT() *OAuth2User_Expecter {
	return &OAuth2User_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with given fields:
func (_m *OAuth2User) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OAuth2User_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type OAuth2User_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *OAuth2User_Expecter) ID() *OAuth2User_ID_Call {
	return &OAuth2User_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *OAuth2User_ID_Call) Run(run func()) *OAuth2User_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OAuth2User_ID_Call) Return(_a0 string) *OAuth2User_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OAuth2User_ID_Call) RunAndReturn(run func() string) *OAuth2User_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, accessToken
func (_m *OAuth2User) Request(ctx context.Context, accessToken string) (*http.Response, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*http.Response, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuth2User_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type OAuth2User_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *OAuth2User_Expecter) Request(ctx interface{}, accessToken interface{}) *OAuth2User_Request_Call {
	return &OAuth2User_Request_Call{Call: _e.mock.On("Request", ctx, accessToken)}
}

func (_c *OAuth2User_Request_Call) Run(run func(ctx context.Context, accessToken string)) *OAuth2User_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OAuth2User_Request_Call) Return(_a0 *http.Response, _a1 error) *OAuth2User_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OAuth2User_Request_Call) RunAndReturn(run func(context.Context, string) (*http.Response, error)) *OAuth2User_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: b
func (_m *OAuth2User) Unmarshal(b []byte) error {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OAuth2User_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type OAuth2User_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - b []byte
func (_e *OAuth2User_Expecter) Unmarshal(b interface{}) *OAuth2User_Unmarshal_Call {
	return &OAuth2User_Unmarshal_Call{Call: _e.mock.On("Unmarshal", b)}
}

func (_c *OAuth2User_Unmarshal_Call) Run(run func(b []byte)) *OAuth2User_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *OAuth2User_Unmarshal_Call) Return(_a0 error) *OAuth2User_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OAuth2User_Unmarshal_Call) RunAndReturn(run func([]byte) error) *OAuth2User_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewOAuth2User creates a new instance of OAuth2User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuth2User(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuth2User {
	mock := &OAuth2User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
