// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock_gosesh

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CallbackHandler is an autogenerated mock type for the CallbackHandler type
type CallbackHandler struct {
	mock.Mock
}

type CallbackHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CallbackHandler) EXPECT() *CallbackHandler_Expecter {
	return &CallbackHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *CallbackHandler) Execute(_a0 http.ResponseWriter, _a1 *http.Request, _a2 error) {
	_m.Called(_a0, _a1, _a2)
}

// CallbackHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CallbackHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
//   - _a2 error
func (_e *CallbackHandler_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CallbackHandler_Execute_Call {
	return &CallbackHandler_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *CallbackHandler_Execute_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request, _a2 error)) *CallbackHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(error))
	})
	return _c
}

func (_c *CallbackHandler_Execute_Call) Return() *CallbackHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *CallbackHandler_Execute_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, error)) *CallbackHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCallbackHandler creates a new instance of CallbackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCallbackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CallbackHandler {
	mock := &CallbackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
